# txikilinux Plymouth Theme
# By EdeR 
# Version 1.0

# Set Background Color
Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

# Set Variables
progress = 1;
numberofframes = 1;
flyingman_image = [];
flyingman_sprite = Sprite();
frame_speed = 3;  # Variable para controlar la velocidad de los fotogramas

# Function to scale images
fun scale_image(image, target_width, target_height) {
    return image.Scale(target_width, target_height);
}

# Set Animation Images Based On GetMode
# Possible modes: boot  shutdown  reboot  updates  system-upgrade

if (Plymouth.GetMode() == "boot" || Plymouth.GetMode() == "updates") {
    # Set C64 Animation: Startup
    numberofframes = 30;

    # Set Animation Images
    for (i = 1; i < 31; i++) {
        original_image = Image("startup-" + i + ".png");
        # Ajusta el tamaño aquí usando un factor de escala
        scale_factor = 1;  # Cambia este valor para ajustar el tamaño
        scaled_image = scale_image(original_image, Window.GetWidth() * scale_factor, Window.GetHeight() * scale_factor);
        flyingman_image[i] = scaled_image;
    }

} else if (Plymouth.GetMode() == "reboot" || Plymouth.GetMode() == "shutdown") {
    # Set C64 Animation: Shutdown
    numberofframes = 30;

    # Set Animation Images
    for (i = 1; i < 31; i++) {
        original_image = Image("shutdown-" + i + ".png");
        # Ajusta el tamaño aquí usando un factor de escala
        scale_factor = 1;  # Cambia este valor para ajustar el tamaño
        scaled_image = scale_image(original_image, Window.GetWidth() * scale_factor, Window.GetHeight() * scale_factor);
        flyingman_image[i] = scaled_image;
    }
}

# Center Images
flyingman_sprite.SetX(Window.GetWidth() / 2 - flyingman_image[1].GetWidth() / 2);
flyingman_sprite.SetY(Window.GetHeight() / 2 - flyingman_image[1].GetHeight() / 2);

//----------------------------------------- Dialog --------------------------------

status = "normal";

fun dialog_setup() {
	local.box;
	local.lock;
	local.entry;
	local.prompt_sprite;

	box.image = ImageNew("dialog/box.png");
	lock.image = ImageNew("dialog/lock.png");
	entry.image = ImageNew("dialog/entry.png");

	box.sprite = SpriteNew();
	box.sprite.SetImage(box.image);
	box.x = Window.GetX() + Window.GetWidth() / 2 - box.image.GetWidth()/2;
	box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
	box.z = 10000;
	box.sprite.SetPosition(box.x, box.y, box.z);

	lock.sprite = SpriteNew();
	lock.sprite.SetImage(lock.image);
	lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
	lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
	lock.z = box.z + 1;
	lock.sprite.SetPosition(lock.x, lock.y, lock.z);

	entry.sprite = SpriteNew();
	entry.sprite.SetImage(entry.image);
	entry.x = lock.x + lock.image.GetWidth();
	entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
	entry.z = box.z + 1;
	entry.sprite.SetPosition(entry.x, entry.y, entry.z);

	prompt_sprite = SpriteNew();
	prompt_sprite.SetPosition(box.x, box.y - 20, box.z);

	global.dialog.box = box;
	global.dialog.lock = lock;
	global.dialog.entry = entry;
	global.dialog.bullet_image = ImageNew("dialog/bullet.png");
	global.dialog.prompt_sprite = prompt_sprite;
	dialog_opacity (1);
}

fun dialog_opacity(opacity) {
	dialog.box.sprite.SetOpacity(opacity);
	dialog.lock.sprite.SetOpacity(opacity);
	dialog.entry.sprite.SetOpacity(opacity);
	dialog.prompt_sprite.SetOpacity(opacity);
	for (index = 0; dialog.bullet[index]; index++) {
		dialog.bullet[index].sprite.SetOpacity(opacity);
	}
}

fun display_normal_callback () {
	global.status = "normal";
	if (global.dialog) {
		dialog_opacity (0);
	}
}

fun display_password_callback (prompt, bullets) {
	global.status = "password";
	if (!global.dialog) {
		dialog_setup();
	}
	else {
		dialog_opacity(1);
	}
	motif.sprite.SetOpacity(0);
	anim.sprite.SetOpacity(0);

	dialog.prompt_sprite.SetImage(Image.Text(prompt, 1.0, 1.0, 1.0));
	for (index = 0; dialog.bullet[index] || index < bullets; index++) {
		if (!dialog.bullet[index]) {
			dialog.bullet[index].sprite = SpriteNew();
			dialog.bullet[index].sprite.SetImage(dialog.bullet_image);
			dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
			dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
			dialog.bullet[index].z = dialog.entry.z + 1;
			dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
		}
		if (index < bullets) {
			dialog.bullet[index].sprite.SetOpacity(1);
		}
		else {
			dialog.bullet[index].sprite.SetOpacity(0);
		}
	}
}

fun display_message_callback (prompt) {
	prompt = Image.Text(prompt,1.0, 1.0, 1.0);
	sprite_prompt.SetImage(prompt);
	sprite_prompt.SetPosition(Window.GetX() + (Window.GetWidth() - prompt.GetWidth()) / 2, Window.GetY() + Window.GetHeight() * 0.93, 2);
}

/* instantiate dialog at startup, to ensure all icons are loaded in memory before initrd is unmounted, in case /usr isn't mounted yet */
dialog_setup(); dialog_opacity(0);
Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetMessageFunction(display_message_callback);

# This function gets called continuously by Plymouth, up to 50 times a second
fun refresh_callback() {
    flyingman_sprite.SetImage(flyingman_image[Math.Int(progress / (3 * frame_speed)) % numberofframes]);
    progress++;
}

Plymouth.SetRefreshFunction(refresh_callback);
